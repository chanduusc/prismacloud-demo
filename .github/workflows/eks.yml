on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
name: EKS - Build, Scan and Deploy
jobs:
  deploy:
    name: EKS - Build, Scan and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    # - name: Expose report
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: SARIF results
    #     path: results.sarif
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build the image 
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    - name: Prisma Cloud image scan
      id: scan
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      uses: PaloAltoNetworks/prisma-cloud-scan@v1.4.0
      with:
        pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
        pcc_user: ${{ secrets.PCC_USER }}
        pcc_pass: ${{ secrets.PCC_PASS }}
        image_name: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ github.sha }}
    - name: Tag, and push the image to Amazon ECR
      id: push-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Set up kubeconfig
      run: |-
        if [ -z "${{ secrets.AWS_EKS_NAME }}" ]
        then
          mkdir ~/.kube
          echo ${{ secrets.KUBE_CONFIG_DATA }} | base64 -d > ~/.kube/config
        else
          aws eks update-kubeconfig --name ${{ secrets.AWS_EKS_NAME }}
        fi
    - name: Set up aws-iam-authenticator
      run: |-
        curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
        chmod +x ./aws-iam-authenticator
        mv aws-iam-authenticator /usr/local/bin
    - name: Deploy to Kubernetes cluster
      run: |-
        kustomize create --resources eks-deployment.yml
        kustomize edit set image "demo-image-name=${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ github.sha }}"
        kustomize edit add patch --patch '[{"op":"add","path":"/spec/template/spec/containers/0/env","value":[{"name":"S3_BUCKET_NAME","value":"'"${{secrets.S3_BUCKET_NAME}}"'"}]}]' --group apps
        cat kustomization.yaml
        kustomize build . | kubectl apply -f -
        kubectl get pods -o wide
